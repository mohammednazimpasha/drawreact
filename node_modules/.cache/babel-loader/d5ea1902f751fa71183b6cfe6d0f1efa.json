{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { LazyBrush } from \"lazy-brush\";\nimport { Catenary } from \"catenary-curve\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport drawImage from \"./drawImage\";\n\nfunction midPointBtw(p1, p2) {\n  return {\n    x: p1.x + (p2.x - p1.x) / 2,\n    y: p1.y + (p2.y - p1.y) / 2\n  };\n}\n\nvar canvasStyle = {\n  display: \"block\",\n  position: \"absolute\"\n};\nvar canvasTypes = [{\n  name: \"interface\",\n  zIndex: 15\n}, {\n  name: \"drawing\",\n  zIndex: 11\n}, {\n  name: \"temp\",\n  zIndex: 12\n}, {\n  name: \"grid\",\n  zIndex: 10\n}];\n\nvar _default = (_temp = _class = function (_PureComponent) {\n  _inherits(_default, _PureComponent);\n\n  function _default(props) {\n    _classCallCheck(this, _default);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n\n    _this.drawImage = function () {\n      if (!_this.props.imgSrc) return; // Load the image\n\n      _this.image = new Image();\n      _this.image.src = _this.props.imgSrc; // Draw the image once loaded\n\n      _this.image.onload = function () {\n        return drawImage({\n          ctx: _this.ctx.grid,\n          img: _this.image\n        });\n      };\n    };\n\n    _this.undo = function () {\n      var lines = _this.lines.slice(0, -1);\n\n      _this.clear();\n\n      _this.simulateDrawingLines({\n        lines: lines,\n        immediate: true\n      });\n    };\n\n    _this.getSaveData = function () {\n      // Construct and return the stringified saveData object\n      return JSON.stringify({\n        lines: _this.lines,\n        width: _this.props.canvasWidth,\n        height: _this.props.canvasHeight\n      });\n    };\n\n    _this.loadSaveData = function (saveData) {\n      var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props.immediateLoading;\n\n      if (typeof saveData !== \"string\") {\n        throw new Error(\"saveData needs to be of type string!\");\n      }\n\n      var _JSON$parse = JSON.parse(saveData),\n          lines = _JSON$parse.lines,\n          width = _JSON$parse.width,\n          height = _JSON$parse.height;\n\n      if (!lines || typeof lines.push !== \"function\") {\n        throw new Error(\"saveData.lines needs to be an array!\");\n      }\n\n      _this.clear();\n\n      if (width === _this.props.canvasWidth && height === _this.props.canvasHeight) {\n        _this.simulateDrawingLines({\n          lines: lines,\n          immediate: immediate\n        });\n      } else {\n        // we need to rescale the lines based on saved & current dimensions\n        var scaleX = _this.props.canvasWidth / width;\n        var scaleY = _this.props.canvasHeight / height;\n        var scaleAvg = (scaleX + scaleY) / 2;\n\n        _this.simulateDrawingLines({\n          lines: lines.map(function (line) {\n            return _extends({}, line, {\n              points: line.points.map(function (p) {\n                return {\n                  x: p.x * scaleX,\n                  y: p.y * scaleY\n                };\n              }),\n              brushRadius: line.brushRadius * scaleAvg\n            });\n          }),\n          immediate: immediate\n        });\n      }\n    };\n\n    _this.simulateDrawingLines = function (_ref) {\n      var lines = _ref.lines,\n          immediate = _ref.immediate; // Simulate live-drawing of the loaded lines\n      // TODO use a generator\n\n      var curTime = 0;\n      var timeoutGap = immediate ? 0 : _this.props.loadTimeOffset;\n      lines.forEach(function (line) {\n        var points = line.points,\n            brushColor = line.brushColor,\n            brushRadius = line.brushRadius;\n\n        var _loop = function _loop(i) {\n          curTime += timeoutGap;\n          window.setTimeout(function () {\n            _this.drawPoints({\n              points: points.slice(0, i + 1),\n              brushColor: brushColor,\n              brushRadius: brushRadius\n            });\n          }, curTime);\n        };\n\n        for (var i = 1; i < points.length; i++) {\n          _loop(i);\n        }\n\n        curTime += timeoutGap;\n        window.setTimeout(function () {\n          // Save this line with its props instead of this.props\n          _this.points = points;\n\n          _this.saveLine({\n            brushColor: brushColor,\n            brushRadius: brushRadius\n          });\n        }, curTime);\n      });\n    };\n\n    _this.handleTouchStart = function (e) {\n      var _this$getPointerPos = _this.getPointerPos(e),\n          x = _this$getPointerPos.x,\n          y = _this$getPointerPos.y;\n\n      _this.lazy.update({\n        x: x,\n        y: y\n      }, {\n        both: true\n      });\n\n      _this.handleMouseDown(e);\n\n      _this.mouseHasMoved = true;\n    };\n\n    _this.handleTouchMove = function (e) {\n      e.preventDefault();\n\n      var _this$getPointerPos2 = _this.getPointerPos(e),\n          x = _this$getPointerPos2.x,\n          y = _this$getPointerPos2.y;\n\n      _this.handlePointerMove(x, y);\n    };\n\n    _this.handleTouchEnd = function (e) {\n      _this.handleMouseUp(e);\n\n      var brush = _this.lazy.getBrushCoordinates();\n\n      _this.lazy.update({\n        x: brush.x,\n        y: brush.y\n      }, {\n        both: true\n      });\n\n      _this.mouseHasMoved = true;\n    };\n\n    _this.handleMouseDown = function (e) {\n      e.preventDefault();\n      _this.isPressing = true;\n    };\n\n    _this.handleMouseMove = function (e) {\n      var _this$getPointerPos3 = _this.getPointerPos(e),\n          x = _this$getPointerPos3.x,\n          y = _this$getPointerPos3.y;\n\n      _this.handlePointerMove(x, y);\n    };\n\n    _this.handleMouseUp = function (e) {\n      e.preventDefault();\n      _this.isDrawing = false;\n      _this.isPressing = false;\n\n      _this.saveLine();\n    };\n\n    _this.handleCanvasResize = function (entries, observer) {\n      var saveData = _this.getSaveData();\n\n      for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        var entry = _ref2;\n        var _entry$contentRect = entry.contentRect,\n            width = _entry$contentRect.width,\n            height = _entry$contentRect.height;\n\n        _this.setCanvasSize(_this.canvas.interface, width, height);\n\n        _this.setCanvasSize(_this.canvas.drawing, width, height);\n\n        _this.setCanvasSize(_this.canvas.temp, width, height);\n\n        _this.setCanvasSize(_this.canvas.grid, width, height);\n\n        _this.drawGrid(_this.ctx.grid);\n\n        _this.loop({\n          once: true\n        });\n      }\n\n      _this.loadSaveData(saveData, true);\n    };\n\n    _this.setCanvasSize = function (canvas, width, height) {\n      canvas.width = width;\n      canvas.height = height;\n      canvas.style.width = width;\n      canvas.style.height = height;\n    };\n\n    _this.getPointerPos = function (e) {\n      var rect = _this.canvas.interface.getBoundingClientRect(); // use cursor pos as default\n\n\n      var clientX = e.clientX;\n      var clientY = e.clientY; // use first touch if available\n\n      if (e.changedTouches && e.changedTouches.length > 0) {\n        clientX = e.changedTouches[0].clientX;\n        clientY = e.changedTouches[0].clientY;\n      } // return mouse/touch position inside canvas\n\n\n      return {\n        x: clientX - rect.left,\n        y: clientY - rect.top\n      };\n    };\n\n    _this.handlePointerMove = function (x, y) {\n      if (_this.props.disabled) return;\n\n      var hasChanged = _this.lazy.update({\n        x: x,\n        y: y\n      });\n\n      var isDisabled = !_this.lazy.isEnabled();\n\n      if (_this.isPressing && hasChanged && !_this.isDrawing || isDisabled && _this.isPressing) {\n        // Start drawing and add point\n        _this.isDrawing = true;\n\n        _this.points.push(_this.lazy.brush.toObject());\n      }\n\n      if (_this.isDrawing && (_this.lazy.brushHasMoved() || isDisabled)) {\n        // Add new point\n        _this.points.push(_this.lazy.brush.toObject()); // Draw current points\n\n\n        _this.drawPoints({\n          points: _this.points,\n          brushColor: _this.props.brushColor,\n          brushRadius: _this.props.brushRadius\n        });\n      }\n\n      _this.mouseHasMoved = true;\n    };\n\n    _this.drawPoints = function (_ref3) {\n      var points = _ref3.points,\n          brushColor = _ref3.brushColor,\n          brushRadius = _ref3.brushRadius;\n      _this.ctx.temp.lineJoin = \"round\";\n      _this.ctx.temp.lineCap = \"round\";\n      _this.ctx.temp.strokeStyle = brushColor;\n\n      _this.ctx.temp.clearRect(0, 0, _this.ctx.temp.canvas.width, _this.ctx.temp.canvas.height);\n\n      _this.ctx.temp.lineWidth = brushRadius * 2;\n      var p1 = points[0];\n      var p2 = points[1];\n\n      _this.ctx.temp.moveTo(p2.x, p2.y);\n\n      _this.ctx.temp.beginPath();\n\n      for (var i = 1, len = points.length; i < len; i++) {\n        // we pick the point between pi+1 & pi+2 as the\n        // end point and p1 as our control point\n        var midPoint = midPointBtw(p1, p2);\n\n        _this.ctx.temp.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n\n        p1 = points[i];\n        p2 = points[i + 1];\n      } // Draw last line as a straight line while\n      // we wait for the next point to be able to calculate\n      // the bezier control point\n\n\n      _this.ctx.temp.lineTo(p1.x, p1.y);\n\n      _this.ctx.temp.stroke();\n    };\n\n    _this.saveLine = function () {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          brushColor = _ref4.brushColor,\n          brushRadius = _ref4.brushRadius;\n\n      if (_this.points.length < 2) return; // Save as new line\n\n      _this.lines.push({\n        points: [].concat(_this.points),\n        brushColor: brushColor || _this.props.brushColor,\n        brushRadius: brushRadius || _this.props.brushRadius\n      }); // Reset points array\n\n\n      _this.points.length = 0;\n      var width = _this.canvas.temp.width;\n      var height = _this.canvas.temp.height; // Copy the line to the drawing canvas\n\n      _this.ctx.drawing.drawImage(_this.canvas.temp, 0, 0, width, height); // Clear the temporary line-drawing canvas\n\n\n      _this.ctx.temp.clearRect(0, 0, width, height);\n    };\n\n    _this.clear = function () {\n      _this.lines = [];\n      _this.valuesChanged = true;\n\n      _this.ctx.drawing.clearRect(0, 0, _this.canvas.drawing.width, _this.canvas.drawing.height);\n\n      _this.ctx.temp.clearRect(0, 0, _this.canvas.temp.width, _this.canvas.temp.height);\n    };\n\n    _this.loop = function () {\n      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref5$once = _ref5.once,\n          once = _ref5$once === undefined ? false : _ref5$once;\n\n      if (_this.mouseHasMoved || _this.valuesChanged) {\n        var pointer = _this.lazy.getPointerCoordinates();\n\n        var brush = _this.lazy.getBrushCoordinates();\n\n        _this.drawInterface(_this.ctx.interface, pointer, brush);\n\n        _this.mouseHasMoved = false;\n        _this.valuesChanged = false;\n      }\n\n      if (!once) {\n        window.requestAnimationFrame(function () {\n          _this.loop();\n        });\n      }\n    };\n\n    _this.drawGrid = function (ctx) {\n      if (_this.props.hideGrid) return;\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      ctx.beginPath();\n      ctx.setLineDash([5, 1]);\n      ctx.setLineDash([]);\n      ctx.strokeStyle = _this.props.gridColor;\n      ctx.lineWidth = 0.5;\n      var gridSize = 25;\n      var countX = 0;\n\n      while (countX < ctx.canvas.width) {\n        countX += gridSize;\n        ctx.moveTo(countX, 0);\n        ctx.lineTo(countX, ctx.canvas.height);\n      }\n\n      ctx.stroke();\n      var countY = 0;\n\n      while (countY < ctx.canvas.height) {\n        countY += gridSize;\n        ctx.moveTo(0, countY);\n        ctx.lineTo(ctx.canvas.width, countY);\n      }\n\n      ctx.stroke();\n    };\n\n    _this.drawInterface = function (ctx, pointer, brush) {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Draw brush preview\n\n      ctx.beginPath();\n      ctx.fillStyle = _this.props.brushColor;\n      ctx.arc(brush.x, brush.y, _this.props.brushRadius, 0, Math.PI * 2, true);\n      ctx.fill(); // Draw mouse point (the one directly at the cursor)\n\n      ctx.beginPath();\n      ctx.fillStyle = _this.props.catenaryColor;\n      ctx.arc(pointer.x, pointer.y, 4, 0, Math.PI * 2, true);\n      ctx.fill(); // Draw catenary\n\n      if (_this.lazy.isEnabled()) {\n        ctx.beginPath();\n        ctx.lineWidth = 2;\n        ctx.lineCap = \"round\";\n        ctx.setLineDash([2, 4]);\n        ctx.strokeStyle = _this.props.catenaryColor;\n\n        _this.catenary.drawToCanvas(_this.ctx.interface, brush, pointer, _this.chainLength);\n\n        ctx.stroke();\n      } // Draw brush point (the one in the middle of the brush preview)\n\n\n      ctx.beginPath();\n      ctx.fillStyle = _this.props.catenaryColor;\n      ctx.arc(brush.x, brush.y, 2, 0, Math.PI * 2, true);\n      ctx.fill();\n    };\n\n    _this.canvas = {};\n    _this.ctx = {};\n    _this.catenary = new Catenary();\n    _this.points = [];\n    _this.lines = [];\n    _this.mouseHasMoved = true;\n    _this.valuesChanged = true;\n    _this.isDrawing = false;\n    _this.isPressing = false;\n    return _this;\n  }\n\n  _default.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    this.lazy = new LazyBrush({\n      radius: this.props.lazyRadius * window.devicePixelRatio,\n      enabled: true,\n      initialPoint: {\n        x: window.innerWidth / 2,\n        y: window.innerHeight / 2\n      }\n    });\n    this.chainLength = this.props.lazyRadius * window.devicePixelRatio;\n    var observeCanvas = new ResizeObserver(function (entries, observer) {\n      return _this2.handleCanvasResize(entries, observer);\n    });\n    observeCanvas.observe(this.canvasContainer);\n    this.drawImage();\n    this.loop();\n    window.setTimeout(function () {\n      var initX = window.innerWidth / 2;\n      var initY = window.innerHeight / 2;\n\n      _this2.lazy.update({\n        x: initX - _this2.chainLength / 4,\n        y: initY\n      }, {\n        both: true\n      });\n\n      _this2.lazy.update({\n        x: initX + _this2.chainLength / 4,\n        y: initY\n      }, {\n        both: false\n      });\n\n      _this2.mouseHasMoved = true;\n      _this2.valuesChanged = true;\n\n      _this2.clear(); // Load saveData from prop if it exists\n\n\n      if (_this2.props.saveData) {\n        _this2.loadSaveData(_this2.props.saveData);\n      }\n    }, 100);\n  };\n\n  _default.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.lazyRadius !== this.props.lazyRadius) {\n      // Set new lazyRadius values\n      this.chainLength = this.props.lazyRadius * window.devicePixelRatio;\n      this.lazy.setRadius(this.props.lazyRadius * window.devicePixelRatio);\n    }\n\n    if (prevProps.saveData !== this.props.saveData) {\n      this.loadSaveData(this.props.saveData);\n    }\n\n    if (JSON.stringify(prevProps) !== JSON.stringify(this.props)) {\n      // Signal this.loop function that values changed\n      this.valuesChanged = true;\n    }\n  };\n\n  _default.prototype.render = function render() {\n    var _this3 = this;\n\n    return React.createElement(\"div\", {\n      style: _extends({\n        display: \"block\",\n        background: \"#fff\",\n        touchAction: \"none\",\n        width: this.props.canvasWidth,\n        height: this.props.canvasHeight\n      }, this.props.style),\n      ref: function ref(container) {\n        if (container) {\n          _this3.canvasContainer = container;\n        }\n      }\n    }, canvasTypes.map(function (_ref6) {\n      var name = _ref6.name,\n          zIndex = _ref6.zIndex;\n      var isInterface = name === \"interface\";\n      return React.createElement(\"canvas\", {\n        key: name,\n        ref: function ref(canvas) {\n          if (canvas) {\n            _this3.canvas[name] = canvas;\n            _this3.ctx[name] = canvas.getContext(\"2d\");\n          }\n        },\n        style: _extends({}, canvasStyle, {\n          zIndex: zIndex\n        }),\n        onMouseDown: isInterface ? _this3.handleMouseDown : undefined,\n        onMouseMove: isInterface ? _this3.handleMouseMove : undefined,\n        onMouseUp: isInterface ? _this3.handleMouseUp : undefined,\n        onMouseOut: isInterface ? _this3.handleMouseUp : undefined,\n        onTouchStart: isInterface ? _this3.handleTouchStart : undefined,\n        onTouchMove: isInterface ? _this3.handleTouchMove : undefined,\n        onTouchEnd: isInterface ? _this3.handleTouchEnd : undefined,\n        onTouchCancel: isInterface ? _this3.handleTouchEnd : undefined\n      });\n    }));\n  };\n\n  return _default;\n}(PureComponent), _class.propTypes = {\n  loadTimeOffset: PropTypes.number,\n  lazyRadius: PropTypes.number,\n  brushRadius: PropTypes.number,\n  brushColor: PropTypes.string,\n  catenaryColor: PropTypes.string,\n  gridColor: PropTypes.string,\n  hideGrid: PropTypes.bool,\n  canvasWidth: PropTypes.number,\n  canvasHeight: PropTypes.number,\n  disabled: PropTypes.bool,\n  imgSrc: PropTypes.string,\n  saveData: PropTypes.string,\n  immediateLoading: PropTypes.bool\n}, _class.defaultProps = {\n  loadTimeOffset: 5,\n  lazyRadius: 12,\n  brushRadius: 10,\n  brushColor: \"#444\",\n  catenaryColor: \"#0a0302\",\n  gridColor: \"rgba(150,150,150,0.17)\",\n  hideGrid: false,\n  canvasWidth: 400,\n  canvasHeight: 400,\n  disabled: false,\n  imgSrc: \"\",\n  saveData: \"\",\n  immediateLoading: false\n}, _temp);\n\nexport { _default as default };","map":null,"metadata":{},"sourceType":"module"}